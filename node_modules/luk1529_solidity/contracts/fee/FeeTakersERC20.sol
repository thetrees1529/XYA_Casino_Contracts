//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";


contract FeeTakers is Ownable {

    constructor(IERC20 Token_) {
        _setToken(Token_);
    }

    IERC20 _Token;

    struct FeeTaker {
        address addr;
        uint points;
    }
    FeeTaker[] _feeTakers;

    event FeeSent(address to, uint amount);    

    //set the token address
    function setToken(IERC20 Token_) public onlyOwner {
        _setToken(Token_);
    }

    //manage where profit is sent to
    function getFeeTakersLength() public view onlyOwner returns(uint) {
        return _getFeeTakersLength();
    }
    function getFeeTakerAt(uint index) public view onlyOwner returns(FeeTaker memory) {
        return _getFeeTakerAt(index);
    }
    function addToFeeTakers(address addr, uint points) public onlyOwner {
        _addToFeeTakers(addr, points);
    }
    function removeFromFeeTakers(uint index) public onlyOwner {
        _removeFromFeeTakers(index);
    }


    function _getFeeTakersLength() private view returns(uint) {
        return _feeTakers.length;
    }
    function _getFeeTakerAt(uint index) private view returns(FeeTaker storage) {
        return _feeTakers[index];
    }
    function _addToFeeTakers(address addr, uint points) private {
        _feeTakers.push(FeeTaker(addr, points));
    }
    function _removeFromFeeTakers(uint index) private {
        _feeTakers[index] = _feeTakers[_feeTakers.length - 1];
        _feeTakers.pop();
    }


    function _distributeFee(uint fee) internal {
        uint feePoints;
        uint feePerPoint;
        for(uint i; i < _getFeeTakersLength(); i ++) {
            feePoints += _getFeeTakerAt(i).points;
        }
        feePerPoint = fee / feePoints;
        for(uint i; i < _getFeeTakersLength(); i ++) {
            FeeTaker storage feeTaker = _getFeeTakerAt(i);
            address feeTakerAddr = feeTaker.addr;
            uint toSend = feeTaker.points * feePerPoint;
            _Token.transfer(feeTakerAddr, toSend);
            emit FeeSent(feeTakerAddr, toSend);
        }
    }


    function _setToken(IERC20 Token_) private {
        _Token = Token_;
    }
}